//linkedlist.h

#ifndef _LINKEDLIST_H_
#define _LINKEDLIST_H_

// Node 구조체
class Node
{
public:
	Employee *data;		// Employee 참조 객체 데이터 
	Node *next;		// 다음 노드를 가리키는 포인터 
	Node *prev;
public:
	Node(Employee*, Node*, Node*);
	Node();
};


// 클래스 LinkedList 선언 
class LinkedList
{
private:
	int count;			// 전체 개수 
	Node *head;			// head 위치 저장 포인터
	Node *tail;			// tail 위치 저장 포인터

public:
	//-------------------------------------------------------------
	// 리스트 초기화
	// - LinkedList의 참조객체를 받아서 리스트를 생성
	//-------------------------------------------------------------
	LinkedList();	 

	//-------------------------------------------------------------
	// 리스트 삭제
	// - LinkedList 생성 메모리 삭제 : destroyList 재사용
	//-------------------------------------------------------------
	~LinkedList();		

	//-------------------------------------------------------------
	// 리스트의 처음 위치에 삽입 
	// - Employee객체를 받아서 리스트의 처음에 삽입 
	//-------------------------------------------------------------
	bool insertNode(Employee*);


	//-------------------------------------------------------------
	// 리스트의 임의의 위치에 삽입
	// - Employee객체를 받아서 임의의 위치에 삽입하는 연산(기본값:0) 
	//-------------------------------------------------------------
	bool insertNode(int, Employee*);	


	//-------------------------------------------------------------
	// 리스트에서 임의의 위치에 해당하는 노드 삭제 
	// - 삭제된 Node는 호출자에게 넘겨진다. (기본값 : 0)
	//-------------------------------------------------------------
	Employee* deleteNode(int);


	//-------------------------------------------------------------
	// 리스트에서 임의의 위치에 해당하는 노드 리턴 
	// - 해당 위치의 노드를 리턴한다.(삭제 안됨)
	//-------------------------------------------------------------
	Node* retrieveNode(int);


	//-------------------------------------------------------------
	// 리스트가 비어있는지를 연산 
	// - true & false 값을 리턴한다.
	//-------------------------------------------------------------
	bool isEmpty();


	//-------------------------------------------------------------
	// 리스트의 노드의 개수를 반환하는 연산 
	//-------------------------------------------------------------
	int length()		{ return count; }


	//-------------------------------------------------------------
	// 리스트의 모든 Node를 순회하면서 출력 
	//-------------------------------------------------------------
	void display();


	//-------------------------------------------------------------
	// 리스트 전체 삭제 
	// - 리스트의 모든 node가 가진 메모리를 반환하는 연산 
	//-------------------------------------------------------------
//	void destroyList(LinkedList*);		// 소멸자 처리 
};

#endif /*_LINKEDLIST_H_*/