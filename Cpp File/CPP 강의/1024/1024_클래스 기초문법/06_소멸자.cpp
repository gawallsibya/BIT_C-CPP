/**********************************************************
 [ 소멸자] 
**********************************************************/
/*
class Point
{
private:
	int x;
	int y;
public:
	~Point()
	{
	}
}
void main()
{
	Point p1;
}

특징
 객체가 소멸되기 직전에 호출된다.
 프로그래머가 정의 하지 않으면 default 소멸자가 제공된다.

형태
 리턴형이 없다.
 함수이름은 클래스 이름 앞에 ~가 붙는다.
 파라미터를 가질 수 없다.
 함수 Overloading 이 불가능하다. 1개만 만들 수 있다.

객체 소멸과정
 소멸자가 호출된다.
 메모리를 반환한다.

 생성자에서 할당 받은 자원은 소멸자에서 해제한다.

-------------------------------------------------
아래 클래스의 문제점을 지적하고 해결해 보자.

#include <iostream>
using namespace std;

class People
{
	char* name;
	int age;
public:
	People(int _age, char* _name)
	{
		age = _age;
		name = new char[strlen(_name)+1];
		strcpy( name, _name);
	}
};
void main()
{
	People p(20,"홍길동");
}


// 문제점...





 소멸자에서는 모든 포인터 멤버에 대해 delete를 수행한다.

 대부분 포인터를 멤버로 가지고 있는 클래스는 객체 소멸시 
 메모리의 낭비를 막기 위해 모든 포인터 멤버에 대해 
 delete를 수행 해야 한다. 
 
 일반적으로 어떤 클래스가 포인터 멤버를 가지고 있다면, 
 생성자에서 각각의 포인터를 초기화. 메모리를 할당 해서 
 초기화 하거나 메모리를 할당하지 않을 것이라면 그 포인터를
 0	으로 초기화 한다.

 소멸자에서는 각각의 포인터에 대해 delete를 수행한다.
 (메모리가 할당 되지 않았더라도 0번지를 delete하는 것은 
 안전하다.)

*/