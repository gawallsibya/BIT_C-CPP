/************************************************************
  01. 아래 코드가 실행될 수 있는 클래스 구현 
*************************************************************/
void main()
{
     Student Kim(8906123);	// 학번
     Kim.SetName("홍길동");
     Kim.SetScore(99);		// 단 해당 Set메서드에서 0~100의 
							// 값만 처리할 수 있도록 할것 

	 cout << "학번 : " << Kim.GetStNum() << endl;
	 cout << "이름 : " << Kim.GetName() << endl;
	 cout << "점수 : " << Kim.GetScore() << endl;
}


/************************************************************
  02. 아래 코드가 실행될 수 있는 클래스 구현 
      클래스 내에서 friend 함수 구현
*************************************************************/
/*
void OutToday(Date &d, Time &t)
{
     printf("오늘은 %d년 %d월 %d일이며 지금 시간은 %d:%d:%d입니다.\n",
          d.year,d.month,d.day,t.hour,t.min,t.sec);
}

void main()
{
     Date D(2005,01,02);
     Time T(12,34,56);
     OutToday(D,T);
}
*/

/************************************************************
  03. 아래 코드가 실행될 수 있는 클래스 구현 
      D.OutToday 맴버 함수내에서 T의 private에 접근할 수 있도
	  록 friend 처리 할 것
************************************************************/
/*
void main()
{
     Date D(2005,01,02);
     Time T(12,34,56);
     D.OutToday(T);
}
*/


/************************************************************
  04. 아래 코드가 실행될 수 있는 클래스 구현 
      정적 맴버 변수 / 맴버 함수의 구현
	  맴버 변수 역할 : 생성된 객체의 수 저장 
************************************************************/
/*
void main()
{
     Count::InitNum();		// static 맴버 변수의 값을 0으로 대입
     Count::OutNum();		// "현재 객체 개수 = X" 문장 출력

     Count C,*pC;			// 객체 생성시 static 맴버 변수 
     C.OutNum();			// 값을 1 증가 
     pC=new Count;
     pC->OutNum();
     delete pC;				// 객체 소멸시 static 맴버 변수 
     pC->OutNum();			// 값을 1 감소 
     printf("크기=%d\n",sizeof(C));
}
*/